name: Tinybird Workspace Creation and Data Migration

on:
  workflow_dispatch:
    inputs:
      source_workspace:
        description: 'Source workspace name (to copy data from)'
        required: true
        type: string
      target_workspace:
        description: 'Target workspace name (to create and copy data to)'
        required: true
        type: string
      copy_data:
        description: 'Copy last partition data from source to target'
        required: false
        type: boolean
        default: true
      source_token:
        description: 'Source workspace token (if different from default)'
        required: false
        type: string

env:
  TINYBIRD_HOST: ${{ secrets.TINYBIRD_HOST }}
  TINYBIRD_TOKEN: ${{ secrets.TINYBIRD_TOKEN }}

jobs:
  create-workspace-and-migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Tinybird CLI
        run: |
          curl https://tinybird.co | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Validate inputs
        run: |
          echo "🔍 Validating workflow inputs..."
          echo "Source workspace: ${{ github.event.inputs.source_workspace }}"
          echo "Target workspace: ${{ github.event.inputs.target_workspace }}"
          echo "Copy data: ${{ github.event.inputs.copy_data }}"
          
          if [ "${{ github.event.inputs.source_workspace }}" = "${{ github.event.inputs.target_workspace }}" ]; then
            echo "❌ Source and target workspaces cannot be the same"
            exit 1
          fi

      - name: Set up source token
        run: |
          # Set source token (use input if provided, otherwise use default)
          if [ -n "${{ github.event.inputs.source_token }}" ]; then
            export SOURCE_TOKEN="${{ github.event.inputs.source_token }}"
          else
            export SOURCE_TOKEN="${{ env.TINYBIRD_TOKEN }}"
          fi
          
          echo "Source token configured: ${SOURCE_TOKEN:0:10}..."

      - name: Create new Tinybird workspace
        run: |
          echo "🚀 Creating new Tinybird workspace: ${{ github.event.inputs.target_workspace }}"
          
          # Create new workspace using Tinybird CLI
          # The CLI will use the default token to create the workspace
          tb --cloud workspace create \
            --name "${{ github.event.inputs.target_workspace }}" \
            --host "${{ env.TINYBIRD_HOST }}" \
            --token "${{ env.TINYBIRD_TOKEN }}"
          
          echo "✅ Workspace created successfully"
          
          # Get the workspace token for the newly created workspace
          echo "🔑 Extracting workspace token..."
          
          # Wait a moment for the workspace to be fully created
          sleep 5
          
          WORKSPACE_INFO=$(tb --cloud workspace ls \
            --host "${{ env.TINYBIRD_HOST }}" \
            --token "${{ env.TINYBIRD_TOKEN }}" \
            --format json | jq -r ".[] | select(.name == \"${{ github.event.inputs.target_workspace }}\")")
          
          if [ -z "$WORKSPACE_INFO" ] || [ "$WORKSPACE_INFO" = "null" ]; then
            echo "❌ Failed to get workspace information. Retrying..."
            sleep 10
            WORKSPACE_INFO=$(tb --cloud workspace ls \
              --host "${{ env.TINYBIRD_HOST }}" \
              --token "${{ env.TINYBIRD_TOKEN }}" \
              --format json | jq -r ".[] | select(.name == \"${{ github.event.inputs.target_workspace }}\")")
            
            if [ -z "$WORKSPACE_INFO" ] || [ "$WORKSPACE_INFO" = "null" ]; then
              echo "❌ Failed to get workspace information after retry"
              exit 1
            fi
          fi
          
          # Extract the token from the workspace info
          TARGET_TOKEN=$(echo "$WORKSPACE_INFO" | jq -r '.token')
          
          if [ -z "$TARGET_TOKEN" ] || [ "$TARGET_TOKEN" = "null" ]; then
            echo "❌ Failed to extract workspace token"
            echo "Workspace info: $WORKSPACE_INFO"
            exit 1
          fi
          
          echo "✅ Target workspace token extracted: ${TARGET_TOKEN:0:10}..."
          
          # Export the token for use in subsequent steps
          echo "TARGET_TOKEN=$TARGET_TOKEN" >> $GITHUB_ENV

      - name: Deploy resources to new workspace
        run: |
          echo "📦 Deploying all resources to new workspace..."
          cd tinybird
          
          # Deploy all resources (datasources, endpoints, materializations)
          tb --cloud deploy \
            --host "${{ env.TINYBIRD_HOST }}" \
            --token "$TARGET_TOKEN" \
            --workspace "${{ github.event.inputs.target_workspace }}"
          
          echo "✅ Resources deployed successfully"

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment in new workspace..."
          cd tinybird
          
          # List all resources in the new workspace
          echo "📊 Datasources:"
          tb --cloud datasource ls \
            --host "${{ env.TINYBIRD_HOST }}" \
            --token "$TARGET_TOKEN" \
            --workspace "${{ github.event.inputs.target_workspace }}"
          
          echo "🔗 Endpoints:"
          tb --cloud pipe ls \
            --host "${{ env.TINYBIRD_HOST }}" \
            --token "$TARGET_TOKEN" \
            --workspace "${{ github.event.inputs.target_workspace }}"
          
          echo "✅ Deployment verification completed"

      - name: Copy last partition data (if requested)
        if: github.event.inputs.copy_data == 'true'
        run: |
          echo "📋 Copying last partition data from source to target workspace..."
          
          # Get list of datasources from the tinybird directory
          cd tinybird/datasources
          
          for datasource_file in *.datasource; do
            if [ -f "$datasource_file" ]; then
              datasource_name=$(basename "$datasource_file" .datasource)
              echo "🔄 Processing datasource: $datasource_name"
              
              # Get the last partition from source workspace
              echo "📥 Getting last partition from source workspace..."
              last_partition=$(tb --cloud datasource partition ls "$datasource_name" \
                --host "${{ env.TINYBIRD_HOST }}" \
                --token "$SOURCE_TOKEN" \
                --workspace "${{ github.event.inputs.source_workspace }}" \
                --format json | jq -r '.[-1].name' 2>/dev/null || echo "")
              
              if [ -n "$last_partition" ] && [ "$last_partition" != "null" ]; then
                echo "📦 Copying partition: $last_partition"
                
                # Create a temporary directory for the data
                temp_dir=$(mktemp -d)
                
                # Export data from source workspace
                tb --cloud datasource partition export "$datasource_name" "$last_partition" \
                  --host "${{ env.TINYBIRD_HOST }}" \
                  --token "$SOURCE_TOKEN" \
                  --workspace "${{ github.event.inputs.source_workspace }}" \
                  --output "$temp_dir/${datasource_name}_${last_partition}.parquet"
                
                # Import data to target workspace
                if [ -f "$temp_dir/${datasource_name}_${last_partition}.parquet" ]; then
                  tb --cloud datasource append "$datasource_name" \
                    --host "${{ env.TINYBIRD_HOST }}" \
                    --token "$TARGET_TOKEN" \
                    --workspace "${{ github.event.inputs.target_workspace }}" \
                    "$temp_dir/${datasource_name}_${last_partition}.parquet"
                  
                  echo "✅ Successfully copied partition $last_partition for $datasource_name"
                else
                  echo "⚠️ No data file found for $datasource_name partition $last_partition"
                fi
                
                # Clean up temporary directory
                rm -rf "$temp_dir"
              else
                echo "⚠️ No partitions found for datasource: $datasource_name"
              fi
            fi
          done
          
          echo "✅ Data copy process completed"

      - name: Run tests in new workspace
        run: |
          echo "🧪 Running tests in new workspace..."
          cd tinybird
          
          # Run tests against the new workspace
          tb test run \
            --host "${{ env.TINYBIRD_HOST }}" \
            --token "$TARGET_TOKEN" \
            --workspace "${{ github.event.inputs.target_workspace }}"
          
          echo "✅ Tests completed successfully"

      - name: Generate workspace summary
        run: |
          echo "📊 Generating workspace summary..."
          
          echo "## Workspace Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ New Workspace Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Workspace Name**: ${{ github.event.inputs.target_workspace }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Host**: ${{ env.TINYBIRD_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Resources Deployed" >> $GITHUB_STEP_SUMMARY
          cd tinybird
          
          # Count datasources
          datasource_count=$(ls datasources/*.datasource 2>/dev/null | wc -l)
          echo "- **Datasources**: $datasource_count" >> $GITHUB_STEP_SUMMARY
          
          # Count endpoints
          endpoint_count=$(ls endpoints/*.pipe 2>/dev/null | wc -l)
          echo "- **Endpoints**: $endpoint_count" >> $GITHUB_STEP_SUMMARY
          
          # Count materializations
          materialization_count=$(ls materializations/*.pipe 2>/dev/null | wc -l)
          echo "- **Materializations**: $materialization_count" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.copy_data }}" = "true" ]; then
            echo "### 📋 Data Migration" >> $GITHUB_STEP_SUMMARY
            echo "- **Source Workspace**: ${{ github.event.inputs.source_workspace }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Data Copied**: Last partition from each datasource" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the new workspace in Tinybird dashboard" >> $GITHUB_STEP_SUMMARY
          echo "2. Update any configuration files that reference the workspace" >> $GITHUB_STEP_SUMMARY
          echo "3. Test endpoints and materializations" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup (if workspace creation fails)
        if: failure()
        run: |
          echo "🧹 Cleaning up on failure..."
          
          # Only attempt cleanup if we have the target token
          if [ -n "$TARGET_TOKEN" ]; then
            echo "🗑️ Attempting to delete workspace: ${{ github.event.inputs.target_workspace }}"
            tb --cloud workspace delete "${{ github.event.inputs.target_workspace }}" \
              --host "${{ env.TINYBIRD_HOST }}" \
              --token "$TARGET_TOKEN" \
              --force || echo "⚠️ Could not delete workspace (may not exist)"
          fi 