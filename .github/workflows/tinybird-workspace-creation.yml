name: Tinybird Workspace Creation and Data Migration

on:
  workflow_dispatch:
    inputs:
      source_workspace:
        description: 'Source workspace name (to copy data from)'
        required: true
        type: string
      target_workspace:
        description: 'Target workspace name (to create and copy data to)'
        required: true
        type: string
      copy_data:
        description: 'Copy last partition data from source to target'
        required: false
        type: boolean
        default: true
      source_token:
        description: 'Source workspace token (if different from default)'
        required: false
        type: string

env:
  TINYBIRD_HOST: ${{ secrets.TINYBIRD_HOST }}
  TINYBIRD_TOKEN: ${{ secrets.TINYBIRD_TOKEN }}
  ORG_ID: ${{ secrets.ORG_ID }}
  TINYBIRD_USER_TOKEN: ${{ secrets.TINYBIRD_USER_TOKEN }}

jobs:
  create-workspace-and-migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Tinybird CLI
        run: |
          curl https://tinybird.co | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Validate inputs
        run: |
          echo "üîç Validating workflow inputs..."
          echo "Source workspace: ${{ github.event.inputs.source_workspace }}"
          echo "Target workspace: ${{ github.event.inputs.target_workspace }}"
          echo "Copy data: ${{ github.event.inputs.copy_data }}"
          
          if [ "${{ github.event.inputs.source_workspace }}" = "${{ github.event.inputs.target_workspace }}" ]; then
            echo "‚ùå Source and target workspaces cannot be the same"
            exit 1
          fi

      - name: Set up source token
        run: |
          # Set source token (use input if provided, otherwise use default)
          if [ -n "${{ github.event.inputs.source_token }}" ]; then
            export SOURCE_TOKEN="${{ github.event.inputs.source_token }}"
          else
            export SOURCE_TOKEN="${{ env.TINYBIRD_TOKEN }}"
          fi
          
          echo "Source token configured: ${SOURCE_TOKEN:0:10}..."

      - name: Create new Tinybird workspace
        run: |
          echo "üöÄ Creating new Tinybird workspace: ${{ github.event.inputs.target_workspace }}"
          # Create new workspace using Tinybird CLI with organization context only
          tb --cloud \
            --host "${{ env.TINYBIRD_HOST }}" \
            --token "${{ env.TINYBIRD_TOKEN }}" \
            --user-token "${{ env.TINYBIRD_USER_TOKEN }}" \
            workspace create --organization-id "${{ env.ORG_ID }}" "${{ github.event.inputs.target_workspace }}" 
          
          echo "‚úÖ Workspace created successfully"
          

      - name: Deploy resources to new workspace
        run: |
          echo "üì¶ Deploying all resources to new workspace..."
          cd tinybird

          echo "Selecting the tokens to make the deployment"
          tb --cloud --user-token "${{ env.TINYBIRD_USER_TOKEN }}" workspace use "${{ github.event.inputs.target_workspace }}"
          ADMIN_TOKEN_NEW=$(tb --cloud token ls | awk '/name: admin token/{getline; print $2}')
          
          # Deploy all resources (datasources, endpoints, materializations)
          tb --cloud --host "${{ env.TINYBIRD_HOST }}" \
            --token "${{ env.ADMIN_TOKEN_NEW }}" \
            deploy --wait 
          
          echo "‚úÖ Resources deployed successfully"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment in new workspace..."
          cd tinybird
          
          # List all resources in the new workspace
          echo "üìä Datasources:"
          tb --cloud --host "${{ env.TINYBIRD_HOST }}" \
            --token "${{ env.ADMIN_TOKEN_NEW }}" \
            datasource ls
          
          echo "üîó Endpoints:"
          tb --cloud --host "${{ env.TINYBIRD_HOST }}" \
            --token "${{ env.ADMIN_TOKEN_NEW }}" \
            pipe ls 
          
          echo "‚úÖ Deployment verification completed"

      - name: Copy last partition data (if requested)
        if: github.event.inputs.copy_data == 'true'
        run: |
          echo "üìã Copying last partition data from source to target workspace..."

          echo "Selecting the materializations to avoid copy data from them"
          datasources=()

          for file in tinybird/materializations/*.pipe; do
            if [ -f "$file" ]; then
              # Look for the line starting with DATASOURCE and get the 2nd word
              ds=$(grep -E '^DATASOURCE ' "$file" | awk '{print $2}')
              
              if [ -n "$ds" ]; then
                datasources+=("$ds")
              fi
            fi
          done
          
          # Get list of datasources from the tinybird directory
          cd tinybird/datasources
          
          for datasource_file in *.datasource; do
            if [ -f "$datasource_file" ]; then
              datasource_name=$(basename "$datasource_file" .datasource)
              if [[ ! " ${datasources[*]} " =~ " ${datasource_name} " ]]; then
                echo "üîÑ Processing datasource: $datasource_name"
                
                # Export data from source workspace
                tb --cloud \
                  --host "${{ env.TINYBIRD_HOST }}" \
                  --token "$TINYBIRD_TOKEN" \
                  datasource export "$datasource_name" --rows 1000 --format CSV
                
                # Import data to target workspace
                if [ -f "fixtures/${datasource_name}.csv" ]; then
                  tb --cloud \
                    --host "${{ env.TINYBIRD_HOST }}" \
                    --token "$ADMIN_TOKEN_NEW" \
                    datasource append "$datasource_name" \
                    --file "fixtures/${datasource_name}.csv"
                  
                  echo "‚úÖ Successfully copied data for $datasource_name"
                else
                  echo "‚ö†Ô∏è No data file found for $datasource_name"
                fi
                
                # Clean up temporary directory
                rm -rf "fixtures/"
                # else
                #   echo "‚ö†Ô∏è No partitions found for datasource: $datasource_name"
                # fi
              else
                echo "‚ö†Ô∏è Datasource $datasource_name is a materializations, skipping"
              fi
            fi
          done
          
          echo "‚úÖ Data copy process completed"

      - name: Generate workspace summary
        run: |
          echo "üìä Generating workspace summary..."
          
          echo "## Workspace Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ New Workspace Created" >> $GITHUB_STEP_SUMMARY
          echo "- **Workspace Name**: ${{ github.event.inputs.target_workspace }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Host**: ${{ env.TINYBIRD_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üì¶ Resources Deployed" >> $GITHUB_STEP_SUMMARY
          cd tinybird
          
          # Count datasources
          datasource_count=$(ls datasources/*.datasource 2>/dev/null | wc -l)
          echo "- **Datasources**: $datasource_count" >> $GITHUB_STEP_SUMMARY
          
          # Count endpoints
          endpoint_count=$(ls endpoints/*.pipe 2>/dev/null | wc -l)
          echo "- **Endpoints**: $endpoint_count" >> $GITHUB_STEP_SUMMARY
          
          # Count materializations
          materialization_count=$(ls materializations/*.pipe 2>/dev/null | wc -l)
          echo "- **Materializations**: $materialization_count" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.copy_data }}" = "true" ]; then
            echo "### üìã Data Migration" >> $GITHUB_STEP_SUMMARY
            echo "- **Source Workspace**: ${{ github.event.inputs.source_workspace }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Data Copied**: Last partition from each datasource" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the new workspace in Tinybird dashboard" >> $GITHUB_STEP_SUMMARY
          echo "2. Update any configuration files that reference the workspace" >> $GITHUB_STEP_SUMMARY
          echo "3. Test endpoints and materializations" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup (if workspace creation fails)
        if: failure()
        run: |
          echo "üßπ Cleaning up on failure..."
          
          # Only attempt cleanup if we have the target token
          if [ -n "$TINYBIRD_USER_TOKEN" ]; then
            echo "üóëÔ∏è Attempting to delete workspace: ${{ github.event.inputs.target_workspace }}"
            tb --cloud \
              --host "${{ env.TINYBIRD_HOST }}" \
              --token "$TINYBIRD_USER_TOKEN" \
              workspace delete "${{ github.event.inputs.target_workspace }}" --yes || echo "‚ö†Ô∏è Could not delete workspace (may not exist)"
          fi 